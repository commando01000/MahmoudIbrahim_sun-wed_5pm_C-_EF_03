// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using MahmoudIbrahim_sun_wed_5pm_C__EF_03.Models.Configurations;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
#nullable enable

namespace MahmoudIbrahim_sun_wed_5pm_C__EF_03.Models;

public partial class NorthwindContext : DbContext
{
    public NorthwindContext()
    {
    }

    public NorthwindContext(DbContextOptions<NorthwindContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AlphabeticalListOfProduct> AlphabeticalListOfProducts { get; set; }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<CategorySalesFor1997> CategorySalesFor1997s { get; set; }

    public virtual DbSet<CurrentProductList> CurrentProductLists { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<CustomerAndSuppliersByCity> CustomerAndSuppliersByCities { get; set; }

    public virtual DbSet<CustomerCustomerDemo> CustomerCustomerDemos { get; set; }

    public virtual DbSet<CustomerDemographic> CustomerDemographics { get; set; }

    public virtual DbSet<Employee> Employees { get; set; }

    public virtual DbSet<EmployeeTerritory> EmployeeTerritories { get; set; }

    public virtual DbSet<Invoice> Invoices { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<OrderDetail> OrderDetails { get; set; }

    public virtual DbSet<OrderDetailsExtended> OrderDetailsExtendeds { get; set; }

    public virtual DbSet<OrderSubtotal> OrderSubtotals { get; set; }

    public virtual DbSet<OrdersQry> OrdersQries { get; set; }

    public virtual DbSet<Product> Products { get; set; }

    public virtual DbSet<ProductSalesFor1997> ProductSalesFor1997s { get; set; }

    public virtual DbSet<ProductsAboveAveragePrice> ProductsAboveAveragePrices { get; set; }

    public virtual DbSet<ProductsByCategory> ProductsByCategories { get; set; }

    public virtual DbSet<QuarterlyOrder> QuarterlyOrders { get; set; }

    public virtual DbSet<Region> Regions { get; set; }

    public virtual DbSet<SalesByCategory> SalesByCategories { get; set; }

    public virtual DbSet<SalesTotalsByAmount> SalesTotalsByAmounts { get; set; }

    public virtual DbSet<Shipper> Shippers { get; set; }

    public virtual DbSet<SummaryOfSalesByQuarter> SummaryOfSalesByQuarters { get; set; }

    public virtual DbSet<SummaryOfSalesByYear> SummaryOfSalesByYears { get; set; }

    public virtual DbSet<Supplier> Suppliers { get; set; }

    public virtual DbSet<Territory> Territories { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer("Data Source=SUPRAA;Initial Catalog=Northwind;trustservercertificate=true;Integrated Security=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.ApplyConfiguration(new Configurations.AlphabeticalListOfProductConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CategorySalesFor1997Configuration());
        modelBuilder.ApplyConfiguration(new Configurations.CurrentProductListConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CustomerConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CustomerAndSuppliersByCityConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CustomerCustomerDemoConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CustomerDemographicConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EmployeeConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EmployeeTerritoryConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.InvoiceConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.OrderConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.OrderDetailConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.OrderDetailsExtendedConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.OrderSubtotalConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.OrdersQryConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ProductConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ProductSalesFor1997Configuration());
        modelBuilder.ApplyConfiguration(new Configurations.ProductsAboveAveragePriceConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ProductsByCategoryConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.QuarterlyOrderConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.RegionConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SalesByCategoryConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SalesTotalsByAmountConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SummaryOfSalesByQuarterConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SummaryOfSalesByYearConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.TerritoryConfiguration());

        OnModelCreatingGeneratedFunctions(modelBuilder);
        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
